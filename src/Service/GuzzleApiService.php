<?php
/**
 * @author Adam Englander <adam@launchkey.com>
 * @copyright 2015 LaunchKey, Inc. See project license for usage.
 */

namespace LaunchKey\SDK\Service;


use GuzzleHttp\Client;
use LaunchKey\SDK\Domain\AuthRequest;
use LaunchKey\SDK\Domain\AuthResponse;
use LaunchKey\SDK\Domain\DeOrbitCallback;
use LaunchKey\SDK\Domain\PingResponse;
use LaunchKey\SDK\Domain\WhiteLabelUser;
use LaunchKey\SDK\Service\Exception\CommunicationError;
use LaunchKey\SDK\Service\Exception\InvalidCredentialsError;
use LaunchKey\SDK\Service\Exception\InvalidRequestError;
use LaunchKey\SDK\Service\Exception\UnknownCallbackActionError;

class GuzzleApiService implements ApiService
{
    /**
     * @var Client
     */
    private $guzzle;

    /**
     * @var CryptService
     */
    private $cryptService;

    /**
     * @param $guzzle
     * @param CryptService $cryptService
     */
    public function __construct(
        Client $guzzle,
        CryptService $cryptService
    ) {
        $this->guzzle = $guzzle;
        $this->cryptService = $cryptService;
    }

    /**
     * Perform a ping request
     * @return PingResponse
     * @throws CommunicationError If there was an error communicating with the endpoint
     */
    public function ping()
    {
        // TODO: Implement ping() method.
    }

    /**
     * Perform an "auth" request
     *
     * @param string $username Username to authorize
     * @param bool $session Is the request for a user session and not a transaction
     * @param string $publicKey The LaunchKey Engine's RSA public key of the current RSA public/private key pair.
     * @return AuthRequest
     * @throws CommunicationError If there was an error communicating with the endpoint
     * @throws InvalidCredentialsError If the credentials supplied to the endpoint were invalid
     * @throws InvalidRequestError If the endpoint proclaims the request invalid
     */
    public function auth($username, $session, $publicKey)
    {
        // TODO: Implement auth() method.
    }

    /**
     * Poll to see if the auth request is completed and approved/denied
     *
     * @param string $authRequest auth_request returned from an auth call
     * @param string $publicKey The LaunchKey Engine's RSA public key of the current RSA public/private key pair.
     * @return AuthResponse
     * @throws CommunicationError If there was an error communicating with the endpoint
     * @throws InvalidCredentialsError If the credentials supplied to the endpoint were invalid
     * @throws InvalidRequestError If the endpoint proclaims the request invalid
     */
    public function poll($authRequest, $publicKey)
    {
        // TODO: Implement poll() method.
    }

    /**
     * Update the LaunchKey Engine with the current status of the auth request or user session
     *
     * @param string $authRequest auth_request returned from an auth call
     * @param string $action Action to log.  i.e. Authenticate, Revoke, etc.
     * @param bool $status
     * @param string $publicKey The LaunchKey Engine's RSA public key of the current RSA public/private key pair.
     * @return  If there was an error communicating with the endpoint
     */
    public function log($authRequest, $action, $status, $publicKey)
    {
        // TODO: Implement log() method.
    }

    /**
     * Create a white label user with the following identifier
     *
     * @param $identifier Unique and permanent identifier for the user in the white label application.  This identifier
     * will be used in all future communications regarding this user.  As such, it cannot ever change.
     * @param string $publicKey The LaunchKey Engine's RSA public key of the current RSA public/private key pair.
     *
     * @return WhiteLabelUser
     * @throws CommunicationError If there was an error communicating with the endpoint
     * @throws InvalidCredentialsError If the credentials supplied to the endpoint were invalid
     * @throws InvalidRequestError If the endpoint proclaims the request invalid
     */
    public function createWhiteLabelUser($identifier, $publicKey)
    {
        // TODO: Implement createWhiteLabelUser() method.
    }

    /**
     * Handle a LaunchKey engine callback with the provided post data
     *
     * @param array $postData
     * @return AuthResponse|DeOrbitCallback Object generated by processing the provided $postData
     * @throws InvalidRequestError when the signature is invalid
     * @throws UnknownCallbackActionError when the callback type could not be determined by the data provided
     */
    public function handleCallback(array $postData)
    {
        // TODO: Implement handleCallback() method.
    }
}
